buildscript {
    repositories {
        jcenter()
        maven {
        	name = "Forge"
        	url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.


ext.config = parseConfig(file('build.properties'))

// This gets tagged onto the archive name
version= "${config.version.minecraft}-${config.version.mod.major}.${config.version.mod.minor}.${config.version.mod.revis}.${config.version.mod.patch}"
group= "${config.group}"
archivesBaseName = "${config.archive}"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "${config.version.minecraft}-${config.version.forge}"
    runDir = "run"
    replace '@VERSION@', "${config.version.mod.major}.${config.version.mod.minor}.${config.version.mod.revis}.${config.version.mod.patch}"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "${config.version.snapshot}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {

    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven/"
    }
    
    maven {
        url "http://dvs1.progwml6.com/files/maven"
    }
    
    maven {
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    
    maven {
        name "Foxiehost"
        url "http://maven.foxiehost.eu"
    }
	
    maven {
    	name "Chisel"
    	url "http://maven.tterrag.com"
    }
    
    maven {
		url 'https://repo.elytradev.com/'
	}
}

dependencies {

    compile "com.github.glitchfiend.biomesoplenty:BiomesOPlenty:1.12.2-7.0.1.2399:deobf"
    
	// http://dvs1.progwml6.com/files/maven/mezz/jei/
    deobfCompile "mezz.jei:jei_1.12.2:4.11.0.212:api"
    runtime "mezz.jei:jei_1.12.2:4.11.0.212"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Reobfuscate the output of the mod JAR task with SRG names, otherwise the mod won't be able to reference MC classes
reobf {
    coreJar { mappingType = 'SEARGE' }
}

// Define a new task for the contained JAR
// If you want to, you can distribute this as a separate artifact to a Maven
task coreJar(type: Jar) {
    // Copy all compiled files and resources from the source set to the JAR
    // If you have additional source sets, add the same logic here
    from(sourceSets.main.output) {
        // Include the coremod package
        // If you need additional files, add some more includes
        include 'org/blockartistry/DynSurround/asm/**'
    }
    
    // Standard coremod manifest definitions
    manifest {
        // Added benefit of separating mod and coremod: No need for FMLCorePluginContainsFMLMod
        attributes 'FMLCorePlugin': "org.blockartistry.DynSurround.asm.TransformLoader"
        
        // Strictly speaking not required (right now)
        // Allows Forge to extract the dependency to a local repository (Given that the corresponding PR is merged)
        // If another mod ships the same dependency, it doesn't have to be extracted twice
        attributes 'Maven-Artifact': "${project.group}:${project.archivesBaseName}-core:${project.version}"
    }
    // Add a classifier to the JAR ('-core' at the end of the file name)
    // Distinguishes the mod JAR from the shipped one
    classifier 'core'
    group = 'build'
}

task signCoreJar(type: SignJar) {

    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }
    
	dependsOn reobfCoreJar
	
    keyStore = project.keyStore // This needs to be a path to the keystore file
    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    inputFile = coreJar.archivePath.absolutePath
    outputFile = coreJar.archivePath.absolutePath
}

jar {
        // Don't include the coremod in the main JAR
    // If you have more coremod-related packages that aren't nested in the main one, add inclusions for them
    exclude 'org/blockartistry/DynSurround/asm/**'
    
    // Add the output of the coremod JAR task to the main JAR for later extraction
    from(coreJar.archivePath.absolutePath) {
        include '*' // Due to the way Gradle's copy tasks work, we need this line for the JAR to get added
    }
    
    manifest {
        // The crucial manifest attribute: Make Forge extract the contained JAR
        attributes 'ContainedDeps': coreJar.archivePath.name
        attributes 'FMLAT': 'dsurround_at.cfg'
        attributes 'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}"
    }
    
    // Only run the main jar task after the coremod JAR was completely built
    dependsOn signCoreJar
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
    
    manifest {
        // The crucial manifest attribute: Make Forge extract the contained JAR
        attributes 'ContainedDeps': coreJar.archivePath.name
        attributes 'FMLAT': 'dsurround_at.cfg'
        attributes 'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}"
    }
}

// https://gist.github.com/matthewprenger/9b2da059b89433a01c1c
task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }

    keyStore = project.keyStore // This needs to be a path to the keystore file
    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

signJar.dependsOn build
signJar.dependsOn signCoreJar

artifacts {
    archives deobfJar
}
